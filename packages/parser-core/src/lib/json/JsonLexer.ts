// Generated from /Users/hayden/Desktop/antlr/antlr4-ts-playground/packages/parser-core/src/grammar/json/Json.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JsonLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly STRING = 10;
	public static readonly NUMBER = 11;
	public static readonly WS = 12;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"STRING", "ESC", "UNICODE", "HEX", "NUMBER", "INT", "EXP", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", "'false'", 
		"'null'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "STRING", "NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JsonLexer._LITERAL_NAMES, JsonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JsonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JsonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Json.g4"; }

	// @Override
	public get ruleNames(): string[] { return JsonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JsonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JsonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JsonLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0E\x88\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t" +
		"\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03" +
		"\v\x07\vE\n\v\f\v\x0E\vH\v\v\x03\v\x03\v\x03\f\x03\f\x03\f\x05\fO\n\f" +
		"\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x05\x0FZ" +
		"\n\x0F\x03\x0F\x03\x0F\x03\x0F\x06\x0F_\n\x0F\r\x0F\x0E\x0F`\x03\x0F\x05" +
		"\x0Fd\n\x0F\x03\x0F\x05\x0Fg\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05" +
		"\x0Fm\n\x0F\x03\x0F\x05\x0Fp\n\x0F\x03\x10\x03\x10\x03\x10\x07\x10u\n" +
		"\x10\f\x10\x0E\x10x\v\x10\x05\x10z\n\x10\x03\x11\x03\x11\x05\x11~\n\x11" +
		"\x03\x11\x03\x11\x03\x12\x06\x12\x83\n\x12\r\x12\x0E\x12\x84\x03\x12\x03" +
		"\x12\x02\x02\x02\x13\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
		"\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\x02\x19\x02" +
		"\x02\x1B\x02\x02\x1D\x02\r\x1F\x02\x02!\x02\x02#\x02\x0E\x03\x02\n\x04" +
		"\x02$$^^\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x03\x022;\x03\x023;\x04\x02" +
		"GGgg\x04\x02--//\x05\x02\v\f\x0F\x0F\"\"\x02\x90\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x05\'\x03" +
		"\x02\x02\x02\x07)\x03\x02\x02\x02\t+\x03\x02\x02\x02\v-\x03\x02\x02\x02" +
		"\r/\x03\x02\x02\x02\x0F1\x03\x02\x02\x02\x116\x03\x02\x02\x02\x13<\x03" +
		"\x02\x02\x02\x15A\x03\x02\x02\x02\x17K\x03\x02\x02\x02\x19P\x03\x02\x02" +
		"\x02\x1BV\x03\x02\x02\x02\x1Do\x03\x02\x02\x02\x1Fy\x03\x02\x02\x02!{" +
		"\x03\x02\x02\x02#\x82\x03\x02\x02\x02%&\x07}\x02\x02&\x04\x03\x02\x02" +
		"\x02\'(\x07.\x02\x02(\x06\x03\x02\x02\x02)*\x07\x7F\x02\x02*\b\x03\x02" +
		"\x02\x02+,\x07<\x02\x02,\n\x03\x02\x02\x02-.\x07]\x02\x02.\f\x03\x02\x02" +
		"\x02/0\x07_\x02\x020\x0E\x03\x02\x02\x0212\x07v\x02\x0223\x07t\x02\x02" +
		"34\x07w\x02\x0245\x07g\x02\x025\x10\x03\x02\x02\x0267\x07h\x02\x0278\x07" +
		"c\x02\x0289\x07n\x02\x029:\x07u\x02\x02:;\x07g\x02\x02;\x12\x03\x02\x02" +
		"\x02<=\x07p\x02\x02=>\x07w\x02\x02>?\x07n\x02\x02?@\x07n\x02\x02@\x14" +
		"\x03\x02\x02\x02AF\x07$\x02\x02BE\x05\x17\f\x02CE\n\x02\x02\x02DB\x03" +
		"\x02\x02\x02DC\x03\x02\x02\x02EH\x03\x02\x02\x02FD\x03\x02\x02\x02FG\x03" +
		"\x02\x02\x02GI\x03\x02\x02\x02HF\x03\x02\x02\x02IJ\x07$\x02\x02J\x16\x03" +
		"\x02\x02\x02KN\x07^\x02\x02LO\t\x03\x02\x02MO\x05\x19\r\x02NL\x03\x02" +
		"\x02\x02NM\x03\x02\x02\x02O\x18\x03\x02\x02\x02PQ\x07w\x02\x02QR\x05\x1B" +
		"\x0E\x02RS\x05\x1B\x0E\x02ST\x05\x1B\x0E\x02TU\x05\x1B\x0E\x02U\x1A\x03" +
		"\x02\x02\x02VW\t\x04\x02\x02W\x1C\x03\x02\x02\x02XZ\x07/\x02\x02YX\x03" +
		"\x02\x02\x02YZ\x03\x02\x02\x02Z[\x03\x02\x02\x02[\\\x05\x1F\x10\x02\\" +
		"^\x070\x02\x02]_\t\x05\x02\x02^]\x03\x02\x02\x02_`\x03\x02\x02\x02`^\x03" +
		"\x02\x02\x02`a\x03\x02\x02\x02ac\x03\x02\x02\x02bd\x05!\x11\x02cb\x03" +
		"\x02\x02\x02cd\x03\x02\x02\x02dp\x03\x02\x02\x02eg\x07/\x02\x02fe\x03" +
		"\x02\x02\x02fg\x03\x02\x02\x02gh\x03\x02\x02\x02hi\x05\x1F\x10\x02ij\x05" +
		"!\x11\x02jp\x03\x02\x02\x02km\x07/\x02\x02lk\x03\x02\x02\x02lm\x03\x02" +
		"\x02\x02mn\x03\x02\x02\x02np\x05\x1F\x10\x02oY\x03\x02\x02\x02of\x03\x02" +
		"\x02\x02ol\x03\x02\x02\x02p\x1E\x03\x02\x02\x02qz\x072\x02\x02rv\t\x06" +
		"\x02\x02su\t\x05\x02\x02ts\x03\x02\x02\x02ux\x03\x02\x02\x02vt\x03\x02" +
		"\x02\x02vw\x03\x02\x02\x02wz\x03\x02\x02\x02xv\x03\x02\x02\x02yq\x03\x02" +
		"\x02\x02yr\x03\x02\x02\x02z \x03\x02\x02\x02{}\t\x07\x02\x02|~\t\b\x02" +
		"\x02}|\x03\x02\x02\x02}~\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F\x80" +
		"\x05\x1F\x10\x02\x80\"\x03\x02\x02\x02\x81\x83\t\t\x02\x02\x82\x81\x03" +
		"\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\x82\x03\x02\x02\x02\x84\x85\x03" +
		"\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x87\b\x12\x02\x02\x87$\x03\x02" +
		"\x02\x02\x10\x02DFNY`cflovy}\x84\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JsonLexer.__ATN) {
			JsonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JsonLexer._serializedATN));
		}

		return JsonLexer.__ATN;
	}

}

